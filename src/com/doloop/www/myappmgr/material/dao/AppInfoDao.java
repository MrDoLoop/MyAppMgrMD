package com.doloop.www.myappmgr.material.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APP_INFO.
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property AppNamePinyin = new Property(2, String.class, "appNamePinyin", false, "APP_NAME_PINYIN");
        public final static Property AppSortName = new Property(3, String.class, "appSortName", false, "APP_SORT_NAME");
        public final static Property PackageName = new Property(4, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property VersionName = new Property(5, String.class, "versionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(6, int.class, "versionCode", false, "VERSION_CODE");
        public final static Property AppIconBytes = new Property(7, byte[].class, "appIconBytes", false, "APP_ICON_BYTES");
        public final static Property AppSizeStr = new Property(8, String.class, "appSizeStr", false, "APP_SIZE_STR");
        public final static Property AppRawSize = new Property(9, long.class, "appRawSize", false, "APP_RAW_SIZE");
        public final static Property FirstTimeInstallDate = new Property(10, String.class, "firstTimeInstallDate", false, "FIRST_TIME_INSTALL_DATE");
        public final static Property LastModifiedTimeStr = new Property(11, String.class, "lastModifiedTimeStr", false, "LAST_MODIFIED_TIME_STR");
        public final static Property LastModifiedRawTime = new Property(12, long.class, "lastModifiedRawTime", false, "LAST_MODIFIED_RAW_TIME");
        public final static Property ApkFilePath = new Property(13, String.class, "apkFilePath", false, "APK_FILE_PATH");
        public final static Property IsSysApp = new Property(14, boolean.class, "isSysApp", false, "IS_SYS_APP");
    };


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'APP_NAME' TEXT NOT NULL ," + // 1: appName
                "'APP_NAME_PINYIN' TEXT," + // 2: appNamePinyin
                "'APP_SORT_NAME' TEXT," + // 3: appSortName
                "'PACKAGE_NAME' TEXT NOT NULL UNIQUE ," + // 4: packageName
                "'VERSION_NAME' TEXT," + // 5: versionName
                "'VERSION_CODE' INTEGER NOT NULL ," + // 6: versionCode
                "'APP_ICON_BYTES' BLOB," + // 7: appIconBytes
                "'APP_SIZE_STR' TEXT NOT NULL ," + // 8: appSizeStr
                "'APP_RAW_SIZE' INTEGER NOT NULL ," + // 9: appRawSize
                "'FIRST_TIME_INSTALL_DATE' TEXT," + // 10: firstTimeInstallDate
                "'LAST_MODIFIED_TIME_STR' TEXT NOT NULL ," + // 11: lastModifiedTimeStr
                "'LAST_MODIFIED_RAW_TIME' INTEGER NOT NULL ," + // 12: lastModifiedRawTime
                "'APK_FILE_PATH' TEXT NOT NULL ," + // 13: apkFilePath
                "'IS_SYS_APP' INTEGER NOT NULL );"); // 14: isSysApp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAppName());
 
        String appNamePinyin = entity.getAppNamePinyin();
        if (appNamePinyin != null) {
            stmt.bindString(3, appNamePinyin);
        }
 
        String appSortName = entity.getAppSortName();
        if (appSortName != null) {
            stmt.bindString(4, appSortName);
        }
        stmt.bindString(5, entity.getPackageName());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(6, versionName);
        }
        stmt.bindLong(7, entity.getVersionCode());
 
        byte[] appIconBytes = entity.getAppIconBytes();
        if (appIconBytes != null) {
            stmt.bindBlob(8, appIconBytes);
        }
        stmt.bindString(9, entity.getAppSizeStr());
        stmt.bindLong(10, entity.getAppRawSize());
 
        String firstTimeInstallDate = entity.getFirstTimeInstallDate();
        if (firstTimeInstallDate != null) {
            stmt.bindString(11, firstTimeInstallDate);
        }
        stmt.bindString(12, entity.getLastModifiedTimeStr());
        stmt.bindLong(13, entity.getLastModifiedRawTime());
        stmt.bindString(14, entity.getApkFilePath());
        stmt.bindLong(15, entity.getIsSysApp() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appNamePinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appSortName
            cursor.getString(offset + 4), // packageName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // versionName
            cursor.getInt(offset + 6), // versionCode
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // appIconBytes
            cursor.getString(offset + 8), // appSizeStr
            cursor.getLong(offset + 9), // appRawSize
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // firstTimeInstallDate
            cursor.getString(offset + 11), // lastModifiedTimeStr
            cursor.getLong(offset + 12), // lastModifiedRawTime
            cursor.getString(offset + 13), // apkFilePath
            cursor.getShort(offset + 14) != 0 // isSysApp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.getString(offset + 1));
        entity.setAppNamePinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppSortName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPackageName(cursor.getString(offset + 4));
        entity.setVersionName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVersionCode(cursor.getInt(offset + 6));
        entity.setAppIconBytes(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setAppSizeStr(cursor.getString(offset + 8));
        entity.setAppRawSize(cursor.getLong(offset + 9));
        entity.setFirstTimeInstallDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastModifiedTimeStr(cursor.getString(offset + 11));
        entity.setLastModifiedRawTime(cursor.getLong(offset + 12));
        entity.setApkFilePath(cursor.getString(offset + 13));
        entity.setIsSysApp(cursor.getShort(offset + 14) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
